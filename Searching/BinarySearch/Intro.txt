Binary Search Algorithm is a searching algorithm used in a sorted array by repeatedly
dividing the search interval in half. The idea of binary search is to use the 
information that the array is sorted and reduce the time complexity to O(log N)

Binary Search Algorithm
Below is the step-by-step algorithm for Binary Search:

Divide the search space into two halves by finding the middle index “mid”. 
Compare the middle element of the search space with the key. 
If the key is found at middle element, the process is terminated.
If the key is not found at middle element, choose which half will be used as the next search space.
If the key is smaller than the middle element, then the left side is used for next search.
If the key is larger than the middle element, then the right side is used for next search.
This process is continued until the key is found or the total search space is exhausted.

How to Implement Binary Search Algorithm?
The Binary Search Algorithm can be implemented in the following two ways

Iterative Binary Search Algorithm
Recursive Binary Search Algorithm

Recursive Binary Search Algorithm:

Create a recursive function and compare the mid of the search space with the key. 
And based on the result either return the index where the key is found or call the recursive 
function for the next search space.

Time Complexity: 
Best Case: O(1)
Average Case: O(log N)
Worst Case: O(log N)
Auxiliary Space: O(1), If the recursive call stack is considered then the auxiliary space will be O(logN).

Advantages of Binary Search

Binary search is faster than linear search, especially for large arrays.
More efficient than other searching algorithms with a similar time complexity,
such as interpolation search or exponential search.
Binary search is well-suited for searching large datasets that are stored in external 
memory, such as on a hard drive or in the cloud.

Disadvantages of Binary Search
The array should be sorted.
Binary search requires that the data structure being searched be stored in contiguous memory locations. 

